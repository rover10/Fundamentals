The basic condition for recursively divinding an array such that at some point <START> as well as <END> point become same is.

mid= (end - start)/2 + start;

LeftPart(start, mid)
RightPart(mid+1, end)

Base condition to stop is (start == end)




Eg.

void divideArray(int *arr, int start, int end){
	int  mid = (end - start)/2 +start;
	if(start==end)
		return;
	divideArray(arr, start, mid);
	divideArray(arr, mid+1, end);
}

=====================C++=========================
#include<iostream>
using namespace std;

void divideArray(int *arr, int start, int end){
        int  mid = (end - start)/2 +start;
	        if(start==end){
		        	cout<<start<<end<<endl;
				        	return;
						        }
							            
								            divideArray(arr, start, mid);
									            divideArray(arr, mid+1, end);

										    }

										int main(){									    	int arr1[10];									int arr2[11];									divideArray(arr1,0,9);								divideArray(arr2,0,10);								cout<<"Test Passed";
										}
